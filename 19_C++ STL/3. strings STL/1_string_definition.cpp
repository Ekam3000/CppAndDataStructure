#include <iostream>
// use cstring or string.h
#include <string.h>
using namespace std;
int main()
{
    string s0;
    string s1("hello");
    string s2 = "Hello world!";
    string s3(s2);
    string s4 = s3;
    char a[] = {'a', 'b', 'c', 'd', '\0'};
    string s5(a);
    cout << s0 << endl;
    cout << s1 << endl;
    cout << s2 << endl;
    cout << s3 << endl;
    cout << s4 << endl;
    cout << s5 << endl;
    // length
    cout << s0.length() << endl; // 4 is the length. null character is not  counted in the string
    // empty
    if (s0.empty())
    {
        cout << "s0 is an empty string:" << endl;
    }
    // append
    cout << "append" << endl;
    s0.append("i love c++");
    s0.append("hii");
    cout << s0 << endl;
    s0 += s1;
    cout << s0 << endl;
    // remove
    cout << " remove" << endl;
    cout << s0.length() << endl;
    s0.clear();
    cout << s0.length() << endl;
    cout << "comparison" << endl;
    // general systex first_string.compare(second_string)
    s0 = "apple juice";
    s1 = "mango juice";
    cout << s0.compare(s1) << endl;
    cout << s1.compare(s0) << endl;
    // returns an integer ==0 if the strings are equal, otherwise >0(if first_string is greater than second_string) OR <0( first_string is less than second_string). this is called lexographical comparison--> comparison generally used to sort words alphabetically in dictionaries.

    // alter for comparison of two strings

    // Overloaded Operator operations (> or < sign between two strings)
    if (s1 > s0)
    {
        cout << "Mango juice is lexi greater than apple juice" << endl;
    }
    // accessing ith character of a string
    cout << s1[0] << endl;
    // finding substrings
    string s = "i want to have apple juice";
    int idx = s.find("apple");
    cout << idx << endl;
    // remove a word from the string
    cout << "remove a word from the string";
    string word = "apple";
    int len = word.length();
    cout << s << endl;
    s.erase(idx, len + 1); // contains the starting index of the word and the length of the word. +1, is used to remove the extra space which is generated by removing apple
    cout << s << endl;
    // iterate over the string
    for (int i = 0; i < s1.length(); i++)
    {
        cout << s1[i] << ":";
    }
    cout << endl;

    // iterators  
    for (auto it = s1.begin(); it != s1.end(); it++)
    {
        cout << *it << ",";
    }
    cout << endl;
    // for each loop
    for (auto c : s1)
    {
        cout << c << ".";
    }
    return 0;
}

/* strings passing to function-->
function(string s)
{

}
int main()
{
    funtion(s);
}
*/

/*
// iterators
// iteration in strings through s1.begin() and s1.end()  --->
    for (auto it = s1.begin(); it != s1.end(); it++)
    {
        cout << *it << ",";
    }
*/